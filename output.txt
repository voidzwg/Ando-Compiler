declare i32 @getint(...)
declare void @memset(i32*, i32, i32)
declare i32 @printf(i8*, ...)
@arr_1d_a_0 = constant [5 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6]
@arr_2d_a_0 = constant [2 x [2 x i32]][[2 x i32] [i32 7, i32 8], [2 x i32] [i32 8, i32 9]]
@arr_2d_b_0 = constant [3 x [2 x i32]][[2 x i32] [i32 44, i32 55], [2 x i32] [i32 55, i32 66], [2 x i32] [i32 77, i32 77]]
@arr_1d_b_0 = constant [9 x i32] [i32 11, i32 22, i32 33, i32 44, i32 55, i32 66, i32 77, i32 88, i32 99]
@simple_var_c_0 = global i32 327
@simple_var_d_0 = global i32 0
@arr_1d_c_0 = global [2 x i32] [i32 896, i32 1]
@arr_1d_d_0 = global  zeroinitializer

@arr_2d_c_0 = global  zeroinitializer

@arr_2d_d_0 = global [2 x [2 x i32]][[2 x i32] [i32 3, i32 56], [2 x i32] [i32 45, i32 16]]
@arr_2d_e_0 = global  zeroinitializer

@.str.1 = constant [53 x i8] c"Successfully call a function with 3 types of paras.\0A\00"
@.str.2 = constant [11 x i8] c"20373453\0A\0A\00"
@.str.3 = constant [45 x i8] c"\0AJust get a number [%d] (greater than 100).\0A\00"
@.str.4 = constant [57 x i8] c"\0AJust get a number [%d] (smaller than or equal to 100).\0A\00"
@.str.5 = constant [25 x i8] c"GLOBAL simple_var_c: %d\0A\00"
@.str.6 = constant [18 x i8] c"lucky number: %d\0A\00"
@.str.7 = constant [8 x i8] c"(%d)%d\0A\00"
@.str.8 = constant [55 x i8] c"The ones digit of the lucky number is greater than 7.\0A\00"
define void @empty_func() {
block1:
}

define void @para_only(i32 %a_0, i32* %b_0, [2 x i32]* %c_0) {
block2:
	%0 = alloca i32
	store i32 %a_0, i32* %0
	%1 = alloca i32*
	store i32* %b_0, i32** %1
	%2 = alloca [2 x i32]*
	store [2 x i32]* %c_0, [2 x i32]** %2
	%3 = call i32 (i8*, ...) @printf(i8* getelementptr ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0))
	ret void
}

define void @put_stu_id() {
block3:
	%0 = call i32 (i8*, ...) @printf(i8* getelementptr ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
	ret void
}

define i32 @sum_arr_1d(i32* %arr_0, i32 %length_0) {
block4:
	%0 = alloca i32*
	store i32* %arr_0, i32** %0
	%1 = alloca i32
	store i32 %length_0, i32* %1
	%2 = alloca i32
	store i32 0, i32* %2
	%3 = alloca i32
	store i32 0, i32* %3
	br label %block5
block5:
	%4 = load i32, i32* %2
	%5 = load i32, i32* %1
	%6 = sub i32 %5, 1
	%7 = icmp sle i32 %4, %6
	%8 = icmp ne i1 %7, 0
	br i1 %8, label %block6, label %block7
block6:
	%9 = load i32, i32* %3
	%10 = load i32*, i32** %0
	%11 = load i32, i32* %2
	%12 = getelementptr i32, i32* %10, i32 %11
	%13 = load i32, i32* %12
	%14 = add i32 %9, %13
	store i32 %14, i32* %3
	%15 = load i32, i32* %2
	%16 = add i32 %15, 1
	store i32 %16, i32* %2
	br label %block5
block7:
	%17 = load i32, i32* %3
	ret i32 %17
}

define i32 @get_then_print() {
block8:
	%0 = alloca [2 x i32]
	%1 = getelementptr [2 x i32], [2 x i32]* %0, i32 0, i32 0
	call void @memset(i32* %1, i32 0, i32 8)
	store i32 66, i32* %1
	%2 = getelementptr i32, i32* %1, i32 1
	store i32 88, i32* %2
	%3 = getelementptr i32, i32* %1, i32 2
	store i32 66, i32* %3
	%4 = getelementptr i32, i32* %1, i32 3
	store i32 88, i32* %4
	%5 = alloca i32
	store i32 0, i32* %5
	%6 = alloca i32
	store i32 0, i32* %6
	%7 = alloca [2 x [3 x i32]]
	%8 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* %7, i32 0, i32 0, i32 0
	call void @memset(i32* %8, i32 0, i32 24)
	%9 = call i32 @getint()
	store i32 %9, i32* %5
	%10 = load i32, i32* %5
	%11 = icmp sgt i32 %10, 100
	%12 = icmp ne i1 %11, 0
	br i1 %12, label %block9, label %block10
block9:
	%13 = load i32, i32* %5
	%14 = call i32 (i8*, ...) @printf(i8* getelementptr ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i32 %13)
	br label %block11
block10:
	%15 = load i32, i32* %5
	%16 = call i32 (i8*, ...) @printf(i8* getelementptr ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0), i32 %15)
	br label %block11
block11:
	%17 = load i32, i32* %5
	%18 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* %7, i32 0, i32 0, i32 0
	store i32 %17, i32* %18
	%19 = load i32, i32* %5
	%20 = getelementptr [2 x i32], [2 x i32]* %0, i32 0, i32 0
	%21 = load i32, i32* %20
	%22 = div i32 %21, 2
	%23 = add i32 %19, %22
	%24 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* %7, i32 0, i32 0, i32 1
	store i32 %23, i32* %24
	%25 = getelementptr [2 x i32], [2 x i32]* %0, i32 0, i32 0
	%26 = load i32, i32* %25
	%27 = getelementptr [2 x i32], [2 x i32]* %0, i32 0, i32 1
	%28 = load i32, i32* %27
	%29 = mul i32 %26, %28
	%30 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* %7, i32 0, i32 0, i32 2
	store i32 %29, i32* %30
	%31 = getelementptr [2 x [3 x i32]], [2 x [3 x i32]]* %7, i32 0, i32 0
	%32 = getelementptr [3 x i32], [3 x i32]* %31, i32 0, i32 0
	%33 = call i32 @sum_arr_1d(i32* %32, i32 3)
	store i32 %33, i32* %6
	%34 = load i32, i32* %6
	ret i32 %34
}

define void @put_global_simple_var_c() {
block12:
	%0 = call i32 (i8*, ...) @printf(i8* getelementptr ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 327)
	ret void
}

define i32 @main() {
block13:
	%0 = alloca i32
	store i32 0, i32* %0
	%1 = alloca [10 x i32]
	%2 = getelementptr [10 x i32], [10 x i32]* %1, i32 0, i32 0
	call void @memset(i32* %2, i32 0, i32 40)
	%3 = alloca i32
	store i32 10, i32* %3
	call void @put_stu_id()
	call void @empty_func()
	%4 = getelementptr [9 x i32], [9 x i32]* @arr_1d_b_0, i32 0, i32 0
	%5 = load i32, i32* %4
	%6 = getelementptr [5 x i32], [5 x i32]* @arr_1d_a_0, i32 0, i32 2
	%7 = load i32, i32* %6
	%8 = div i32 %5, %7
	store i32 %8, i32 0
	%9 = getelementptr [2 x i32], [2 x i32]* @arr_1d_c_0, i32 0, i32 0
	%10 = getelementptr [2 x [2 x i32]], [2 x [2 x i32]]* @arr_2d_d_0, i32 0, i32 0
	call void @para_only(i32 0, i32* %9, [2 x i32]* %10)
	br label %block14
block14:
	%11 = load i32, i32* %3
	%12 = icmp ne i32 %11, 0
	br i1 %12, label %block15, label %block16
block15:
	%13 = load i32, i32* %3
	%14 = sub i32 %13, 1
	store i32 %14, i32* %3
	%15 = call i32 @get_then_print()
	%16 = srem i32 %15, 10
	%17 = add i32 %16, 10
	store i32 %17, i32* %0
	%18 = load i32, i32* %0
	%19 = icmp sge i32 %18, 10
	%20 = icmp ne i1 %19, 0
	br i1 %20, label %block17, label %block18
block16:
	call void @put_global_simple_var_c()
	ret i32 0
block17:
	%21 = load i32, i32* %0
	%22 = sub i32 %21, 10
	store i32 %22, i32* %0
	br label %block18
block18:
	%23 = load i32, i32* %0
	%24 = call i32 (i8*, ...) @printf(i8* getelementptr ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0), i32 %23)
	%25 = alloca i32
	store i32 0, i32* %25
	%26 = alloca i32
	store i32 0, i32* %26
	br label %block19
block19:
	%27 = load i32, i32* %25
	%28 = icmp slt i32 %27, 8
	%29 = icmp ne i1 %28, 0
	br i1 %29, label %block20, label %block21
block20:
	%30 = load i32, i32* %25
	%31 = icmp eq i32 %30, 2
	%32 = icmp ne i1 %31, 0
	br i1 %32, label %block22, label %block23
block22:
	%33 = load i32, i32* %25
	%34 = add i32 %33, 1
	store i32 %34, i32* %25
	br label %block19
block23:
	%35 = load i32, i32* %0
	%36 = add i32 %35, 1
	%37 = load i32, i32* %25
	%38 = icmp sle i32 %36, %37
	%39 = icmp ne i1 %38, 0
	br i1 %39, label %block26, label %block27
block24:
	%40 = load i32, i32* %25
	%41 = load i32, i32* %25
	%42 = getelementptr [9 x i32], [9 x i32]* @arr_1d_b_0, i32 0, i32 %41
	%43 = load i32, i32* %42
	%44 = call i32 (i8*, ...) @printf(i8* getelementptr ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 %40, i32 %43)
	%45 = load i32, i32* %25
	%46 = getelementptr [9 x i32], [9 x i32]* @arr_1d_b_0, i32 0, i32 %45
	%47 = load i32, i32* %46
	%48 = load i32, i32* %26
	%49 = getelementptr [10 x i32], [10 x i32]* %1, i32 0, i32 %48
	store i32 %47, i32* %49
	%50 = load i32, i32* %26
	%51 = add i32 %50, 1
	store i32 %51, i32* %26
	%52 = load i32, i32* %25
	%53 = add i32 %52, 1
	store i32 %53, i32* %25
	br label %block19
block25:
	br label %block24
block26:
	br label %block21
block27:
	br label %block24
block28:
	br label %block27
block30:
	br label %block14
block21:
	%54 = load i32, i32* %0
	%55 = add i32 %54, 1
	%56 = load i32, i32* %25
	%57 = icmp ne i32 %55, %56
	%58 = icmp ne i1 %57, 0
	br i1 %58, label %block29, label %block30
block29:
	%59 = call i32 (i8*, ...) @printf(i8* getelementptr ([55 x i8], [55 x i8]* @.str.8, i64 0, i64 0))
	br label %block30
}

