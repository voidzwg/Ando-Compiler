declare void @memset(i32*, i32, i32)
declare i32 @printf(i8*, ...)
declare i32 @__isoc99_scanf(i8*, ...)

@c_06_0 = constant [3 x i32] [i32 1, i32 2, i32 3]
@c_07_0 = constant [2 x [2 x i32]][[2 x i32] [i32 1, i32 2], [2 x i32] [i32 3, i32 4]]
@v_01_0 = global i32 1
@v_02_0 = global i32 0
@v_03_0 = global i32 3
@v_04_0 = global i32 0
@v_05_0 = global i32 2
@v_06_0 = global [3 x i32] [i32 1, i32 2, i32 3]
@v_07_0 = global [2 x [2 x i32]][[2 x i32] [i32 1, i32 2], [2 x i32] [i32 3, i32 4]]
@.str.1 = constant [13 x i8] c"Hello World\0A\00"
@.str.2 = constant [3 x i8] c"%d\00"
@.str.3 = constant [10 x i8] c"20377020\0A\00"
@.str.4 = constant [12 x i8] c"vm_01 = %d\0A\00"
@.str.5 = constant [25 x i8] c"vm_02 = %d,  vm_03 = %d\0A\00"
@.str.6 = constant [12 x i8] c"vm_04 = %d\0A\00"
@.str.7 = constant [12 x i8] c"vm_AE = %d\0A\00"
@.str.8 = constant [12 x i8] c"vm_ME = %d\0A\00"
@.str.9 = constant [12 x i8] c"vm_UE = %d\0A\00"
@.str.10 = constant [12 x i8] c"vm_PE = %d\0A\00"
@.str.11 = constant [27 x i8] c"vm_i_1 = %d,  vm_i_2 = %d\0A\00"
@.str.12 = constant [14 x i8] c"vs_test = %d\0A\00"
define void @func_01() {
0:
	%1 = call i32 (i8*, ...) @printf(i8* getelementptr ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0))
	ret void
}

define i32 @func_02() {
0:
	%1 = load i32, i32* @v_01_0
	%2 = add i32 %1, 1
	store i32 %2, i32* @v_01_0
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = alloca i32
	store i32 1, i32* %4
	%5 = alloca i32
	store i32 2, i32* %5
	%6 = alloca i32
	store i32 3, i32* %6
	%7 = load i32, i32* %6
	%8 = add i32 %7, 1
	store i32 %8, i32* %3
	%9 = load i32, i32* %3
	%10 = load i32, i32* %6
	%11 = add i32 %9, %10
	store i32 %11, i32* %3
	%12 = load i32, i32* %3
	%13 = load i32, i32* %5
	%14 = add i32 %12, %13
	store i32 %14, i32* %3
	%15 = load i32, i32* %3
	%16 = load i32, i32* %4
	%17 = add i32 %15, %16
	store i32 %17, i32* %3
	%18 = load i32, i32* %3
	%19 = mul i32 11, 22
	%20 = sdiv i32 %19, 33
	%21 = srem i32 %20, 44
	%22 = add i32 %18, %21
	%23 = srem i32 11, 22
	%24 = sdiv i32 %23, 33
	%25 = mul i32 %24, 44
	%26 = add i32 %22, %25
	%27 = sub i32 0, 1
	%28 = sub i32 0, %27
	%29 = sub i32 0, %28
	%30 = add i32 11, %29
	%31 = sub i32 0, 2
	%32 = sub i32 0, %31
	%33 = sub i32 %30, %32
	%34 = sub i32 %26, %33
	ret i32 %34
}

define i32 @func_03(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = alloca i32
	store i32 1, i32* %3
	%4 = load i32, i32* %2
	%5 = load i32, i32* %3
	%6 = mul i32 %4, %5
	%7 = load i32, i32* @v_05_0
	%8 = mul i32 %6, %7
	%9 = sdiv i32 %8, 123
	ret i32 %9
}

define i32 @func_04(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	store i32 1, i32* %5
	%6 = alloca i32
	store i32 2, i32* %6
	%7 = load i32, i32* %3
	%8 = load i32, i32* %5
	%9 = mul i32 %7, %8
	%10 = load i32, i32* %4
	%11 = load i32, i32* %6
	%12 = sdiv i32 %10, %11
	%13 = add i32 %9, %12
	%14 = call i32 @func_02()
	%15 = add i32 %13, %14
	%16 = load i32, i32* %4
	%17 = call i32 @func_03(i32 %16)
	%18 = sub i32 %15, %17
	ret i32 %18
}

define i32 @func_05(i32* %0) {
1:
	%2 = alloca i32*
	store i32* %0, i32** %2
	%3 = load i32*, i32** %2
	%4 = getelementptr i32, i32* %3, i32 0
	%5 = load i32, i32* %4
	%6 = mul i32 %5, 100
	ret i32 %6
}

define i32 @func_06([3 x i32]* %0) {
1:
	%2 = alloca [3 x i32]*
	store [3 x i32]* %0, [3 x i32]** %2
	%3 = load [3 x i32]*, [3 x i32]** %2
	%4 = getelementptr [3 x i32], [3 x i32]* %3, i32 0, i32 0
	%5 = load i32, i32* %4
	%6 = load [3 x i32]*, [3 x i32]** %2
	%7 = getelementptr [3 x i32], [3 x i32]* %6, i32 1, i32 1
	%8 = load i32, i32* %7
	%9 = add i32 %5, %8
	%10 = load [3 x i32]*, [3 x i32]** %2
	%11 = getelementptr [3 x i32], [3 x i32]* %10, i32 2, i32 2
	%12 = load i32, i32* %11
	%13 = add i32 %9, %12
	ret i32 %13
}

define i32 @func_07(i32 %0, i32* %1, [3 x i32]* %2) {
3:
	%4 = alloca i32
	store i32 %0, i32* %4
	%5 = alloca i32*
	store i32* %1, i32** %5
	%6 = alloca [3 x i32]*
	store [3 x i32]* %2, [3 x i32]** %6
	%7 = load i32, i32* %4
	%8 = load i32*, i32** %5
	%9 = getelementptr i32, i32* %8, i32 0
	%10 = load i32, i32* %9
	%11 = add i32 %7, %10
	%12 = load [3 x i32]*, [3 x i32]** %6
	%13 = getelementptr [3 x i32], [3 x i32]* %12, i32 0, i32 0
	%14 = load i32, i32* %13
	%15 = add i32 %11, %14
	ret i32 %15
}

define i32 @test_if_and_while_01() {
0:
	%1 = alloca i32
	%2 = sub i32 0, 10
	store i32 %2, i32* %1
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = alloca i32
	store i32 1, i32* %4
	%5 = alloca i32
	store i32 0, i32* %5
	%6 = alloca i32
	store i32 0, i32* %6
	%7 = alloca i32
	store i32 100, i32* %7
	%8 = load i32, i32* %1
	%9 = icmp eq i32 0, %8
	%10 = zext i1 %9 to i32
	%11 = icmp sge i32 %10, 0
	%12 = icmp ne i1 %11, 0
	br i1 %12, label %13, label %15
13:
	store i32 2, i32* %4
	%14 = sub i32 0, 1
	store i32 %14, i32* %5
	br label %15
15:
	%16 = load i32, i32* %3
	%17 = icmp slt i32 %16, 0
	%18 = icmp ne i1 %17, 0
	br i1 %18, label %19, label %24
19:
	%20 = load i32, i32* @v_01_0
	store i32 %20, i32* %5
	%21 = load i32, i32* %4
	%22 = icmp eq i32 %21, 1
	%23 = icmp ne i1 %22, 0
	br i1 %23, label %30, label %32
24:
	%25 = load i32, i32* @v_01_0
	%26 = load i32, i32* @v_05_0
	%27 = call i32 @func_04(i32 %25, i32 %26)
	%28 = sub i32 0, %27
	store i32 %28, i32* %5
	br label %29
29:
	br label %35
30:
	%31 = call i32 @func_02()
	store i32 %31, i32* %5
	br label %34
32:
	%33 = mul i32 123, 456
	store i32 %33, i32* %5
	br label %34
34:
	br label %29
35:
	%36 = load i32, i32* %5
	%37 = icmp sgt i32 %36, 0
	%38 = icmp ne i1 %37, 0
	br i1 %38, label %39, label %42
39:
	%40 = load i32, i32* %5
	%41 = sub i32 %40, 1
	store i32 %41, i32* %5
	br label %35
42:
	br label %43
43:
	%44 = load i32, i32* %1
	%45 = icmp slt i32 %44, 0
	%46 = icmp ne i1 %45, 0
	br i1 %46, label %47, label %53
47:
	%48 = load i32, i32* %6
	%49 = add i32 %48, 1
	store i32 %49, i32* %6
	%50 = load i32, i32* %6
	%51 = icmp sle i32 %50, 10
	%52 = icmp ne i1 %51, 0
	br i1 %52, label %57, label %58
53:
	%54 = load i32, i32* %7
	%55 = icmp sgt i32 %54, 40
	%56 = icmp ne i1 %55, 0
	br i1 %56, label %66, label %70
57:
	br label %43
58:
	%59 = load i32, i32* %6
	%60 = icmp eq i32 %59, 12
	%61 = icmp ne i1 %60, 0
	br i1 %61, label %63, label %64
62:
	br label %58
63:
	br label %53
64:
	br label %43
65:
	br label %64
66:
	%67 = load i32, i32* %7
	%68 = icmp sgt i32 %67, 50
	%69 = icmp ne i1 %68, 0
	br i1 %69, label %74, label %78
70:
	%71 = sub i32 0, 4
	store i32 %71, i32* %6
	br label %72
72:
	%73 = load i32, i32* %6
	ret i32 %73
74:
	%75 = load i32, i32* %7
	%76 = icmp sgt i32 %75, 60
	%77 = icmp ne i1 %76, 0
	br i1 %77, label %81, label %85
78:
	%79 = sub i32 0, 3
	store i32 %79, i32* %6
	br label %80
80:
	br label %72
81:
	%82 = load i32, i32* %7
	%83 = icmp sgt i32 %82, 70
	%84 = icmp ne i1 %83, 0
	br i1 %84, label %88, label %89
85:
	%86 = sub i32 0, 2
	store i32 %86, i32* %6
	br label %87
87:
	br label %80
88:
	store i32 0, i32* %6
	br label %91
89:
	%90 = sub i32 0, 1
	store i32 %90, i32* %6
	br label %91
91:
	br label %87
}

define i32 @test_if_and_while_02() {
0:
	%1 = alloca i32
	store i32 0, i32* %1
	%2 = load i32, i32* @v_01_0
	%3 = icmp ne i32 %2, 0
	br i1 %3, label %4, label %7
4:
	%5 = load i32, i32* %1
	%6 = add i32 %5, 1
	store i32 %6, i32* %1
	br label %7
7:
	%8 = load i32, i32* @v_01_0
	%9 = icmp slt i32 123, %8
	%10 = icmp ne i1 %9, 0
	br i1 %10, label %11, label %14
11:
	%12 = load i32, i32* %1
	%13 = add i32 %12, 1
	store i32 %13, i32* %1
	br label %14
14:
	%15 = load i32, i32* @v_01_0
	%16 = mul i32 114514, %15
	%17 = load i32, i32* @v_01_0
	%18 = call i32 @func_03(i32 %17)
	%19 = add i32 %18, 6
	%20 = sdiv i32 1, %19
	%21 = add i32 %16, %20
	%22 = icmp sgt i32 1, %21
	%23 = icmp ne i1 %22, 0
	br i1 %23, label %24, label %27
24:
	%25 = load i32, i32* %1
	%26 = add i32 %25, 1
	store i32 %26, i32* %1
	br label %27
27:
	%28 = load i32, i32* @v_01_0
	%29 = call i32 @func_03(i32 %28)
	%30 = load i32, i32* @v_01_0
	%31 = load i32, i32* @v_05_0
	%32 = call i32 @func_04(i32 %30, i32 %31)
	%33 = icmp sle i32 %29, %32
	%34 = icmp ne i1 %33, 0
	br i1 %34, label %35, label %38
35:
	%36 = load i32, i32* %1
	%37 = add i32 %36, 1
	store i32 %37, i32* %1
	br label %38
38:
	%39 = sub i32 0, 123
	%40 = sub i32 0, %39
	%41 = load i32, i32* @v_05_0
	%42 = call i32 @func_03(i32 %41)
	%43 = sub i32 0, %42
	%44 = sub i32 0, %43
	%45 = icmp sge i32 %40, %44
	%46 = icmp ne i1 %45, 0
	br i1 %46, label %47, label %50
47:
	%48 = load i32, i32* %1
	%49 = add i32 %48, 1
	store i32 %49, i32* %1
	br label %50
50:
	%51 = load i32, i32* @v_01_0
	%52 = icmp slt i32 123, %51
	%53 = load i32, i32* @v_01_0
	%54 = call i32 @func_03(i32 %53)
	%55 = load i32, i32* @v_01_0
	%56 = load i32, i32* @v_05_0
	%57 = call i32 @func_04(i32 %55, i32 %56)
	%58 = icmp sle i32 %54, %57
	%59 = icmp eq i1 %52, %58
	%60 = icmp ne i1 %59, 0
	br i1 %60, label %61, label %64
61:
	%62 = load i32, i32* %1
	%63 = add i32 %62, 1
	store i32 %63, i32* %1
	br label %64
64:
	%65 = load i32, i32* @v_01_0
	%66 = icmp slt i32 123, %65
	%67 = load i32, i32* @v_01_0
	%68 = call i32 @func_03(i32 %67)
	%69 = load i32, i32* @v_01_0
	%70 = load i32, i32* @v_05_0
	%71 = call i32 @func_04(i32 %69, i32 %70)
	%72 = icmp sge i32 %68, %71
	%73 = icmp ne i1 %66, %72
	%74 = icmp ne i1 %73, 0
	br i1 %74, label %75, label %78
75:
	%76 = load i32, i32* %1
	%77 = add i32 %76, 1
	store i32 %77, i32* %1
	br label %78
78:
	%79 = alloca i32
	store i32 1, i32* %79
	%80 = alloca i32
	store i32 2, i32* %80
	%81 = load i32, i32* %79
	%82 = icmp eq i32 %81, 1
	%83 = icmp ne i1 %82, 0
	br i1 %83, label %91, label %87
84:
	%85 = load i32, i32* %1
	%86 = add i32 %85, 1
	store i32 %86, i32* %1
	br label %87
87:
	%88 = load i32, i32* %80
	%89 = icmp ne i32 %88, 2
	%90 = icmp ne i1 %89, 0
	br i1 %90, label %98, label %105
91:
	%92 = call i32 @func_02()
	%93 = icmp ne i32 %92, 0
	br i1 %93, label %94, label %87
94:
	%95 = load i32, i32* %79
	%96 = icmp eq i32 %95, 2
	%97 = icmp ne i1 %96, 0
	br i1 %97, label %84, label %87
98:
	%99 = load i32, i32* %1
	%100 = add i32 %99, 1
	store i32 %100, i32* %1
	br label %101
101:
	%102 = load i32, i32* %79
	%103 = icmp eq i32 %102, 2
	%104 = icmp ne i1 %103, 0
	br i1 %104, label %108, label %115
105:
	%106 = call i32 @func_02()
	%107 = icmp ne i32 %106, 0
	br i1 %107, label %98, label %101
108:
	%109 = load i32, i32* %1
	%110 = add i32 %109, 1
	store i32 %110, i32* %1
	br label %111
111:
	%112 = load i32, i32* %79
	%113 = icmp eq i32 %112, 2
	%114 = icmp ne i1 %113, 0
	br i1 %114, label %127, label %132
115:
	%116 = load i32, i32* %79
	%117 = icmp eq i32 %116, 3
	%118 = icmp ne i1 %117, 0
	br i1 %118, label %108, label %119
119:
	%120 = load i32, i32* %79
	%121 = icmp eq i32 %120, 4
	%122 = icmp ne i1 %121, 0
	br i1 %122, label %108, label %123
123:
	%124 = load i32, i32* %79
	%125 = icmp eq i32 %124, 5
	%126 = icmp ne i1 %125, 0
	br i1 %126, label %108, label %111
127:
	%128 = load i32, i32* %1
	%129 = add i32 %128, 1
	store i32 %129, i32* %1
	br label %130
130:
	%131 = load i32, i32* %1
	ret i32 %131
132:
	%133 = load i32, i32* %79
	%134 = icmp eq i32 %133, 1
	%135 = icmp ne i1 %134, 0
	br i1 %135, label %136, label %130
136:
	%137 = load i32, i32* %80
	%138 = icmp eq i32 %137, 2
	%139 = icmp ne i1 %138, 0
	br i1 %139, label %127, label %130
}

define i32 @main() {
0:
	%1 = add i32 1, 1
	%2 = alloca i32
	store i32 114514, i32* %2
	%3 = alloca i32
	%4 = load i32, i32* @v_01_0
	store i32 %4, i32* %3
	%5 = alloca i32
	store i32 2, i32* %5
	%6 = alloca i32
	%7 = mul i32 11, 22
	%8 = sdiv i32 %7, 33
	%9 = srem i32 %8, 44
	%10 = add i32 %9, 55
	%11 = sub i32 %10, 66
	%12 = sub i32 0, 77
	%13 = add i32 %11, %12
	%14 = sub i32 %13, 88
	%15 = call i32 @func_02()
	%16 = add i32 %14, %15
	store i32 %16, i32* %6
	%17 = alloca i32
	%18 = load i32, i32* %2
	store i32 %18, i32* %17
	%19 = alloca i32
	%20 = load i32, i32* @v_01_0
	%21 = call i32 @func_03(i32 %20)
	store i32 %21, i32* %19
	%22 = alloca i32
	%23 = sub i32 0, 114514
	%24 = sub i32 0, %23
	%25 = sub i32 0, %24
	store i32 %25, i32* %22
	%26 = alloca i32
	%27 = load i32, i32* @v_01_0
	%28 = load i32, i32* @v_03_0
	%29 = call i32 @func_04(i32 %27, i32 %28)
	%30 = sub i32 0, %29
	%31 = sub i32 0, %30
	%32 = sub i32 0, %31
	store i32 %32, i32* %26
	%33 = alloca i32
	%34 = load i32, i32* %17
	store i32 %34, i32* %33
	%35 = alloca i32
	%36 = load i32, i32* @v_01_0
	%37 = mul i32 10, %36
	store i32 %37, i32* %35
	%38 = alloca i32
	%39 = load i32, i32* @v_01_0
	%40 = call i32 @func_03(i32 %39)
	%41 = sdiv i32 %40, 2
	store i32 %41, i32* %38
	%42 = alloca i32
	%43 = sub i32 0, 1
	%44 = sub i32 0, %43
	%45 = sub i32 0, %44
	%46 = load i32, i32* @v_01_0
	%47 = load i32, i32* @v_05_0
	%48 = call i32 @func_04(i32 %46, i32 %47)
	%49 = sub i32 0, %48
	%50 = sub i32 0, %49
	%51 = sub i32 0, %50
	%52 = srem i32 %45, %51
	store i32 %52, i32* %42
	%53 = alloca i32
	%54 = load i32, i32* %33
	store i32 %54, i32* %53
	%55 = alloca i32
	%56 = load i32, i32* @v_01_0
	%57 = mul i32 114514, %56
	%58 = load i32, i32* @v_01_0
	%59 = call i32 @func_03(i32 %58)
	%60 = add i32 %59, 6
	%61 = sdiv i32 2, %60
	%62 = add i32 %57, %61
	store i32 %62, i32* %55
	%63 = alloca i32
	%64 = sub i32 0, 1
	%65 = sub i32 0, %64
	%66 = sub i32 0, %65
	%67 = load i32, i32* @v_01_0
	%68 = load i32, i32* @v_05_0
	%69 = call i32 @func_04(i32 %67, i32 %68)
	%70 = sub i32 0, %69
	%71 = sub i32 0, %70
	%72 = sub i32 0, %71
	%73 = srem i32 %66, %72
	%74 = sub i32 %73, 123
	store i32 %74, i32* %63
	%75 = alloca [2 x i32]
	%76 = getelementptr [2 x i32], [2 x i32]* %75, i32 0, i32 0
	call void @memset(i32* %76, i32 0, i32 8)
	store i32 1, i32* %76
	%77 = getelementptr i32, i32* %76, i32 1
	store i32 1, i32* %77
	%78 = alloca [3 x i32]
	%79 = getelementptr [3 x i32], [3 x i32]* %78, i32 0, i32 0
	call void @memset(i32* %79, i32 0, i32 12)
	store i32 1, i32* %79
	%80 = getelementptr i32, i32* %79, i32 1
	store i32 2, i32* %80
	%81 = getelementptr i32, i32* %79, i32 2
	store i32 3, i32* %81
	%82 = alloca [3 x [3 x i32]]
	%83 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %82, i32 0, i32 0, i32 0
	call void @memset(i32* %83, i32 0, i32 36)
	store i32 11, i32* %83
	%84 = getelementptr i32, i32* %83, i32 1
	store i32 12, i32* %84
	%85 = getelementptr i32, i32* %83, i32 2
	store i32 13, i32* %85
	%86 = getelementptr i32, i32* %83, i32 3
	store i32 21, i32* %86
	%87 = getelementptr i32, i32* %83, i32 4
	store i32 22, i32* %87
	%88 = getelementptr i32, i32* %83, i32 5
	store i32 23, i32* %88
	%89 = getelementptr i32, i32* %83, i32 6
	store i32 31, i32* %89
	%90 = getelementptr i32, i32* %83, i32 7
	store i32 32, i32* %90
	%91 = getelementptr i32, i32* %83, i32 8
	store i32 33, i32* %91
	%92 = alloca [3 x i32]
	%93 = getelementptr [3 x i32], [3 x i32]* %92, i32 0, i32 0
	call void @memset(i32* %93, i32 0, i32 12)
	%94 = alloca [3 x [3 x i32]]
	%95 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %94, i32 0, i32 0, i32 0
	call void @memset(i32* %95, i32 0, i32 36)
	%96 = alloca i32
	%97 = getelementptr [2 x i32], [2 x i32]* %75, i32 0, i32 0
	%98 = load i32, i32* %97
	store i32 %98, i32* %96
	%99 = alloca i32
	%100 = getelementptr [3 x i32], [3 x i32]* %78, i32 0, i32 1
	%101 = load i32, i32* %100
	store i32 %101, i32* %99
	%102 = alloca i32
	%103 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %82, i32 0, i32 1, i32 2
	%104 = load i32, i32* %103
	store i32 %104, i32* %102
	%105 = getelementptr [3 x i32], [3 x i32]* %78, i32 0, i32 0
	store i32 10, i32* %105
	%106 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %82, i32 0, i32 1, i32 2
	store i32 10, i32* %106
	%107 = alloca i32
	%108 = load i32, i32* %96
	%109 = load i32, i32* %99
	%110 = add i32 %108, %109
	%111 = load i32, i32* %102
	%112 = add i32 %110, %111
	%113 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %82, i32 0, i32 0
	%114 = getelementptr [3 x i32], [3 x i32]* %113, i32 0, i32 0
	%115 = call i32 @func_05(i32* %114)
	%116 = add i32 %112, %115
	%117 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %82, i32 0, i32 0
	%118 = call i32 @func_06([3 x i32]* %117)
	%119 = add i32 %116, %118
	%120 = load i32, i32* @v_01_0
	%121 = getelementptr [3 x i32], [3 x i32]* %78, i32 0, i32 0
	%122 = getelementptr [3 x [3 x i32]], [3 x [3 x i32]]* %82, i32 0, i32 0
	%123 = call i32 @func_07(i32 %120, i32* %121, [3 x i32]* %122)
	%124 = add i32 %119, %123
	store i32 %124, i32* %107
	%125 = alloca i32
	store i32 0, i32* %125
	%126 = alloca i32
	store i32 1, i32* %126
	%127 = alloca i32
	store i32 0, i32* %127
	%128 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* %127)
	%129 = alloca i32
	%130 = call i32 @test_if_and_while_01()
	store i32 %130, i32* %129
	%131 = alloca i32
	%132 = call i32 @test_if_and_while_02()
	store i32 %132, i32* %131
	%133 = alloca i32
	%134 = call i32 @func_02()
	store i32 %134, i32* %133
	%135 = alloca i32
	%136 = load i32, i32* @v_03_0
	%137 = call i32 @func_03(i32 %136)
	store i32 %137, i32* %135
	%138 = alloca i32
	%139 = load i32, i32* %126
	%140 = load i32, i32* @v_03_0
	%141 = call i32 @func_04(i32 %139, i32 %140)
	store i32 %141, i32* %138
	%142 = alloca i32
	%143 = load i32, i32* %53
	%144 = load i32, i32* %55
	%145 = sdiv i32 %143, %144
	%146 = load i32, i32* %63
	%147 = srem i32 %145, %146
	store i32 %147, i32* %142
	%148 = alloca i32
	%149 = load i32, i32* %33
	%150 = load i32, i32* %35
	%151 = mul i32 %149, %150
	%152 = load i32, i32* %38
	%153 = load i32, i32* %42
	%154 = mul i32 %152, %153
	%155 = add i32 %151, %154
	store i32 %155, i32* %148
	%156 = alloca i32
	%157 = load i32, i32* %17
	%158 = load i32, i32* %19
	%159 = sub i32 %157, %158
	%160 = load i32, i32* %22
	%161 = sub i32 %159, %160
	%162 = load i32, i32* %22
	%163 = sub i32 %161, %162
	%164 = load i32, i32* %26
	%165 = sub i32 %163, %164
	store i32 %165, i32* %156
	%166 = alloca i32
	%167 = load i32, i32* %2
	%168 = load i32, i32* %3
	%169 = add i32 %167, %168
	%170 = load i32, i32* %5
	%171 = add i32 %169, %170
	%172 = load i32, i32* %6
	%173 = add i32 %171, %172
	store i32 %173, i32* %166
	%174 = call i32 (i8*, ...) @printf(i8* getelementptr ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
	%175 = load i32, i32* %127
	%176 = add i32 %175, 1
	%177 = call i32 (i8*, ...) @printf(i8* getelementptr ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i32 %176)
	%178 = load i32, i32* %133
	%179 = load i32, i32* %135
	%180 = call i32 (i8*, ...) @printf(i8* getelementptr ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 %178, i32 %179)
	%181 = load i32, i32* %138
	%182 = call i32 (i8*, ...) @printf(i8* getelementptr ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 %181)
	%183 = load i32, i32* %142
	%184 = call i32 (i8*, ...) @printf(i8* getelementptr ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0), i32 %183)
	%185 = load i32, i32* %148
	%186 = call i32 (i8*, ...) @printf(i8* getelementptr ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i32 %185)
	%187 = load i32, i32* %156
	%188 = call i32 (i8*, ...) @printf(i8* getelementptr ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i32 %187)
	%189 = load i32, i32* %166
	%190 = call i32 (i8*, ...) @printf(i8* getelementptr ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0), i32 %189)
	%191 = load i32, i32* %129
	%192 = load i32, i32* %131
	%193 = call i32 (i8*, ...) @printf(i8* getelementptr ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0), i32 %191, i32 %192)
	%194 = load i32, i32* %107
	%195 = call i32 (i8*, ...) @printf(i8* getelementptr ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0), i32 %194)
	ret i32 0
}

